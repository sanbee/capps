<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>
<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd
file:///opt/casa/code/xmlcasa/xml/casa.xsd">


        <tool name="flagger" module="flagger">
<code>
	<include>xmlcasa/flagging/flagger_forward.h</include>
<private>
	#include &lt;xmlcasa/flagging/flagger_private.h&gt;
</private>
</code>

        <shortdescription>Tool for manual and automated flagging</shortdescription>
       
<description>
The {\tt flagger} tool performs manual as well as automatic synthesis
flagging operations within casapy. The {\tt flagger} tool can operate on
one measurement set at a time.  
</description>

<!-- ********************************************************************** -->

   <method type="constructor" name="flagger">
   <shortdescription>Construct an flag tool from a
MeasurementSet</shortdescription>
   
<description>
Create an {\tt flagger} tool, and attach it to a specified measurement
set.
</description>
<input>

     <param type="unknown" name="msname">
     <description>Measurement set to be processed</description>
     <value>Table name</value>
     <choice>none</choice>
     </param>
</input>
<returns type="unknown">flagger tool</returns>
<example>

fg:=flag('3C273XC1.MS')      

</example>
</method>


<!-- ********************************************************************** -->

   <method type="function" name="open">
   <shortdescription>Attaches tool to a measurement set.</shortdescription>
   
<description>
This function attaches the tool to a measurement set. If
a measurement set is already attached, it will first detach it, 
and then attach the tool to the new measurement set. 
</description>
<input>

     <param type="string" name="msname">
     <description>Measurement set to be processed</description>
     <value>""</value>
     </param>
</input>
<returns type="bool"/>
<example>

fg.open('3C273XC1.MS')

</example>
</method>

<!-- ********************************************************************** -->

 
   <method type="function" name="setdata">
   <shortdescription>Set the data selection parameters to define a
   subset of the data on which to perform any further selections/operations.
 For unspecified parameters, the full data range is assumed.
All data selection parameters follow the ms-selection syntax.
</shortdescription>
   
<description>
</description>

<input>

<!-- Selection parameters : start -->
     <param type="string" name="field">
     <description>Field indices or source names : example : '2,3C48' </description>
     <value>""</value>
     </param>
     
     <param type="string" name="spw">
     <description>Spectral Window Indices or names : example : '1,2' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="array">
     <description>Array Indices or names : example : 'VLAA' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="feed">
     <description>Feed index or name : example : '1,2' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="scan">
     <description>Scan number : example : '1,2,3' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="baseline">
     <description>Baseline number : example : '2-3,4-5,132 ????' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="uvrange">
     <description> UV-distance range, with a unit : example : '2.0-3000.0 m'</description>
     <value>""</value>
     </param>
    
     <param type="string" name="time">
     <description>Time range, as MJDs or date strings : example : 'xx.x.x.x.x~yy.y.y.y.y'</description>
     <value>""</value>
     </param>

     <param type="string" name="correlation">
     <description>Correlations/polarizations : example : 'RR,LL,RL,LR,XX,YY,XY,YX'</description>
     <value>""</value>
     </param>

<!-- Selection parameters : end -->
     
</input>
<returns type="bool"/> 
</method>
<!-- ********************************************************************** -->

   <method type="function" name="setmanualflags">
   <shortdescription>This function will select specific data, for manual flagging.
   </shortdescription>
   
<description>
This function will select specific data, for manual flagging.
   \n The flags will get applied to the data, after a call to the fg.run() function.
Note that fg.setmanualflags() can be called multiple times before a call to fg.run(). This will apply flags to all selections during a single pass through the data.
</description>
<input>

<!-- Selection parameters : start -->
     <param type="string" name="field">
     <description>Field indices or source names : example : '2,3C48' </description>
     <value>""</value>
     </param>
     
     <param type="string" name="spw">
     <description>Spectral Window Indices or names : example : '1,2' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="array">
     <description>Array Indices or names : example : 'VLAA' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="feed">
     <description>Feed index or name : example : '1,2' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="scan">
     <description>Scan number : example : '1,2,3' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="baseline">
     <description>Baseline number : example : '2-3,4-5,132 ????' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="uvrange">
     <description> UV-distance range, with a unit : example : '2.0-3000.0 m'
     </description>
     <value>""</value>
     </param>
    
     <param type="string" name="time">
     <description>Time range, as MJDs or date strings : example : 'xx.x.x.x.x~yy.y.y.y.y'</description>
     <value>""</value>
     </param>

     <param type="string" name="correlation">
     <description>Correlations/polarizations : example : 'RR,LL,RL,LR,XX,YY,XY,YX'</description>
     <value>""</value>
     </param>

<!-- Selection parameters : end -->
 
     <param type="bool" name="autocorrelation">
     <description>Flag autocorrelations too ? [ True / False ]
     </description>
     <value>false</value>
     </param>
    
     <param type="bool" name="unflag">
     <description>Unflag the specified data ? [ True / False ]
     </description>
     <value>false</value>
     </param>

     <param type="string" name="clipexpr">
     <description>Data expression for value to clip on  : example : 'abs I'
     </description>
     <value>""</value>
     </param>
    
     <param type="doubleArray" name="cliprange">
     <description>Clip Range of the value defined by clipExpr [min,max] : example : [100.0,200.0] 
     </description>
     <value type="vector">
     <value>0</value>
     <value>0</value> </value>
     </param>

     <param type="string" name="clipcolumn">
     <description>Data column to use for clipping  : example : 'DATA'
     </description>
     <value>DATA</value>
     </param>
     
     <param type="bool" name="outside">
     <description>Clip points outside this range ? [ True / False ]
     </description>
     <value>true</value>
     </param>
    
     <param type="bool" name="channelavg">
     <description>Average data over channels before clipping ? [ True / False ]
     </description>
     <value>false</value>
     </param>
    
     <param type="double" name="quackinterval">
     <description>Quack Length in seconds : example : 30.0</description>
     <value>0.0</value>
     </param>

     <param type="string" name="quackmode">
     <description>Quack mode</description>
     <value>beg</value>
     </param>

     <param type="bool" name="quackincrement">
     <description>Quack incrementally?</description>
     <value>false</value>
     </param>

</input>
<returns type="bool"/>
</method>

<!-- ********************************************************************** -->

 
<!-- ********************************************************************** -->
<!-- ********************************************************************** -->
<!-- ********************************************************************** -->
   <method type="function" name="printflagselection">
   <shortdescription>Print out a list of current manual and auto flag selections.
   </shortdescription>
   
<description>
Print out a list of current manual and auto flag selections.
</description>
<input>
</input>
<returns type="bool"/>
</method>

<!-- ********************************************************************** -->

   <method type="function" name="clearflagselection">
   <shortdescription>Clear current manual and auto flag selections.
   </shortdescription>
   
<description>
Clears all current manual and auto flag selections.
</description>
<input>
     <param type="int" name="index">
     <description>Flag selection index to clear. Zero to clear all. </description>
     <value>0</value>
     </param>
</input>
<returns type="bool"/>
</method>

<!-- ********************************************************************** -->

   <method type="function" name="getautoflagparams">
   <shortdescription> Retrieve the current set of input parameters for a specified algorithm.
   \n This returns a python dictionary of parameters and their values.
   </shortdescription>
   
<description>
Retrieve the current set of input parameters for a specified algorithm.
</description>
<input>
   <param type="string" name="algorithm">
   <description>Autoflag Algorithm name</description>
   <value>timemed</value>
   <value>freqmed</value>
   <value>none</value>
   </param>

</input>
<returns type="any"><any type="record"/>record of default parameters</returns>
</method>

<!-- return type should be a record -->

<!-- ********************************************************************** -->

   <method type="function" name="setautoflag">
   <shortdescription>Setup an autoflag algorithm.
   </shortdescription>
   
<description>
Setup an autoflag algorithm.
</description>
<input>
   <param type="string" name="algorithm">
   <description>Autoflag Algorithm name</description>
   <value>timemedian</value>
   <value>freqmedian</value>
   <value>spectralreject</value>
   <value>uvbin</value>
   <value>none</value>
   </param>

   <param type="any" name="parameters">
	     <any type="record"/>
     <description>Parameters for each autoflag algorithm.
     \n The following is a description of currently supported autoflag algorithms.
     \n (1) Time median filtering
     \n (2) Frequency median filtering
     \n (3) Spectral rejection
     \n (4) Uv-binning
     </description>
     <value></value>
     </param>
</input>
<returns type="bool"/> 
</method>

<!-- ********************************************************************** -->
<!-- ********************************************************************** -->

   <method type="function" name="setshadowflags">
   <shortdescription>Setup data selection parameters for flagging of
   shadowed antennas
   </shortdescription>
   
<description>
Defines data selection parameters.
</description>
<input>

<!-- Selection parameters : start -->
     <param type="string" name="field">
     <description>Field indices or source names : example : '2,3C48' </description>
     <value>""</value>
     </param>
     
     <param type="string" name="spw">
     <description>Spectral Window Indices or names : example : '1,2' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="array">
     <description>Array Indices or names : example : 'VLAA' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="feed">
     <description>Feed index or name : example : '1,2' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="scan">
     <description>Scan number : example : '1,2,3' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="baseline">
     <description>Baseline number : example : '2-3,4-5,132 ????' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="uvrange">
     <description> UV-distance range, with a unit : example : '2.0-3000.0 m'
     </description>
     <value>""</value>
     </param>
    
     <param type="string" name="time">
     <description>Time range, as MJDs or date strings : example : 'xx.x.x.x.x~yy.y.y.y.y'</description>
     <value>""</value>
     </param>

     <param type="string" name="correlation">
     <description>Correlations/polarizations : example : 'RR,LL,RL,LR,XX,YY,XY,YX'</description>
     <value>""</value>
     </param>

     <param type="double" name="diameter">
     <description>Antenna diameter to use. If negative,
     the default dish sizes stored in the MS are used : example : diameter = '30'
     </description>
     <value>-1.0</value>
     </param>
<!-- Selection parameters : end -->
 
</input>
<returns type="bool"/>
</method>

<!-- ********************************************************************** -->
<!-- ********************************************************************** -->

   <method type="function" name="setflagsummary">
   <shortdescription>This function produces a summary of the flags. Statistics include
   percentage of flagged data.
   </shortdescription>
   
<description>
Flag summary.
</description>
<input>

<!-- Selection parameters : start -->
     <param type="string" name="field">
     <description>Field indices or source names : example : '2,3C48' </description>
     <value>""</value>
     </param>
     
     <param type="string" name="spw">
     <description>Spectral Window Indices or names : example : '1,2' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="array">
     <description>Array Indices or names : example : 'VLAA' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="feed">
     <description>Feed index or name : example : '1,2' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="scan">
     <description>Scan number : example : '1,2,3' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="baseline">
     <description>Baseline number : example : '2-3,4-5,132 ????' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="uvrange">
     <description> UV-distance range, with a unit : example : '2.0-3000.0 m'
     </description>
     <value>""</value>
     </param>
    
     <param type="string" name="time">
     <description>Time range, as MJDs or date strings : example : 'xx.x.x.x.x~yy.y.y.y.y'</description>
     <value>""</value>
     </param>

     <param type="string" name="correlation">
     <description>Correlations/polarizations : example : 'RR,LL,RL,LR,XX,YY,XY,YX'</description>
     <value>""</value>
     </param>

<!-- Selection parameters : end -->
 
</input>
<returns type="bool"/>
</method>

<!-- ********************************************************************** -->
<!-- ********************************************************************** -->

   <method type="function" name="setqueryflag">
   <shortdescription>
   List out a data description corresponding to the result of a flag query.
   For example, to print out the list of channels with more than 70% of its data flagged.
   </shortdescription>
   
<description>
Flag query
</description>
<input>

<!-- Selection parameters : start -->
     <param type="string" name="field">
     <description>Field indices or source names : example : '2,3C48' </description>
     <value>""</value>
     </param>
     
     <param type="string" name="spw">
     <description>Spectral Window Indices or names : example : '1,2' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="array">
     <description>Array Indices or names : example : 'VLAA' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="feed">
     <description>Feed index or name : example : '1,2' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="scan">
     <description>Scan number : example : '1,2,3' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="baseline">
     <description>Baseline number : example : '2-3,4-5,132 ????' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="uvrange">
     <description> UV-distance range, with a unit : example : '2.0-3000.0 m'
     </description>
     <value>""</value>
     </param>
    
     <param type="string" name="time">
     <description>Time range, as MJDs or date strings : example : 'xx.x.x.x.x~yy.y.y.y.y'</description>
     <value>""</value>
     </param>

     <param type="string" name="correlation">
     <description>Correlations/polarizations : example : 'RR,LL,RL,LR,XX,YY,XY,YX'</description>
     <value>""</value>
     </param>

<!-- Selection parameters : end -->
 
     <param type="string" name="what">
     <description>Summary type, corresponding to a data axis. 
     \n what = 'antenna' will list the percentage of flagged data per antenna
     </description>
     <value>antenna</value>
     <value>channel</value>
     <value>spwid</value>
     <value>baseline</value>
     <value>correlation</value>
     <value>fieldid</value>
     </param>
     
     <param type="double" name="fractionthreshold">
     <description> Threshold on the fraction of flagged data. [0-1]
     \n example : what='antenna', fractionthreshold=0.7
     </description>
     <value>0.0</value>
     </param>

     <!-- silly... -->
     <param type="int" name="nflagsthreshold">
     <description> Threshold on the absolute number of flagged points. 
     \n example : what='antenna', nflagsthreshold=1500
     </description>
     <value>0</value>
     </param>

     <param type="bool" name="morethan">
     <description> List values corresponding to more-than or less-than the specified threshold fraction.
     </description>
     <value>true</value>
     </param>


</input>
<returns type="bool"/>
</method>

<!-- ********************************************************************** -->

   <method type="function" name="setextendflag">
   <shortdescription>
   Extend existing flags along a specific direction.
   </shortdescription>
   
<description>
Extend flags along a specific direction.
</description>
<input>

<!-- Selection parameters : start -->
     <param type="string" name="field">
     <description>Field indices or source names : example : '2,3C48' </description>
     <value>""</value>
     </param>
     
     <param type="string" name="spw">
     <description>Spectral Window Indices or names : example : '1,2' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="array">
     <description>Array Indices or names : example : 'VLAA' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="feed">
     <description>Feed index or name : example : '1,2' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="scan">
     <description>Scan number : example : '1,2,3' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="baseline">
     <description>Baseline number : example : '2-3,4-5,132 ????' </description>
     <value>""</value>
     </param>
    
     <param type="string" name="uvrange">
     <description> UV-distance range, with a unit : example : '2.0-3000.0 m'
     </description>
     <value>""</value>
     </param>
    
     <param type="string" name="time">
     <description>Time range, as MJDs or date strings : example : 'xx.x.x.x.x~yy.y.y.y.y'</description>
     <value>""</value>
     </param>

     <param type="string" name="correlation">
     <description>Correlations/polarizations : example : 'RR,LL,RL,LR,XX,YY,XY,YX'</description>
     <value>""</value>
     </param>

<!-- Selection parameters : end -->
 
     <param type="string" name="along">
     <description>Extend flags along this axis.
     \n along='channel' : extends flags across channels, if any channel has a flag. (need 'width')
     \n along='correlation' : extends flags across polarizations. (need some way to specify which pol)
     \n along='time' : extend flags across timestamps. (need 'width'). Similarly for hourangle.
     \n along='antenna1' : For one timestamp, flag all baselines with the same antenna1.
     \n along='antenna2' : For one timestamp, flag all baselines with the same antenna2.
     \n along='bothantennas' : For one timestamp, flag all baselines with either antenna1 or antenna2.
     \n along='allbaselines' : For one timestamp, extend to all baselines. (Note that this is 
		     different from using rowflags.
     </description>
     <value>channel</value>
     <value>correlation</value>
     <value>time (hourangle)</value>
     <value>antenna1</value>
     <value>antenna2</value>
     <value>bothantennas</value>
     <value>allbaselines</value>
     </param>
     
     <param type="int" name="width">
     <description> The limit to which flags should be extended on either side.
     \n width=4 : Extend flags to 4 data points on either side.
     \n width=0 : Extend to all values along the specified axis.
     </description>
     <value>0</value>
     </param>

</input>
<returns type="bool"/>
</method>

<!-- ********************************************************************** -->





<!-- ********************************************************************** -->

   <method type="function" name="run">
   <shortdescription>Executes a flagging run</shortdescription>
   
<description>
Executes a flagging run.
</description>
<input>

     <param type="bool" name="trial">
     <description>Do a trial run only</description>
     <value>false</value>
     </param>

     <param type="bool" name="reset">
     <description>Reset Flags before flagging</description>
     <value>false</value>
     </param>
</input>
<returns type="record"/>
<example>
</example>
</method>
 
<!-- ********************************************************************** -->
    <method type="function" name="writeflagstodisk">
   <shortdescription>Applies flags from trial autoflag runs, to the data.</shortdescription>
   
<description>
Applies flags to the data.
</description>
<input>
</input>
<returns type="bool"/>
<example>
</example>
</method>
 

<!-- ********************************************************************** -->

   <method type="function" name="help">
   <shortdescription>Prints help on available flagging methods</shortdescription>
   
<description>

This function prints a summary of the available flagging methods
and their parameters. Use {\tt help()} with no arguments to get help
of all methods, or {\tt help("method  names")} for specific ones.

</description>
<input>
     <param type="string" name="names">
     <description>Names of methods (all methods, if omitted)</description>
     <value></value>
     </param>
</input>
<returns type="bool"/>
<example>
fg.help()
fg.help("timemed freqmed")
</example>
</method>

 
<!-- ********************************************************************** -->


   <method type="function" name="done">
   <shortdescription>Destroys the flag tool</shortdescription>
   
<description>

This function destroys the flag tool.

</description>
<returns type="bool"/>
<example>
- fg.done()
T
-
</example>
</method>


 
<!-- ********************************************************************** -->


   <method type="function" name="saveflagversion">
   <shortdescription>*** \n Save current flags with a version name.*** 
   			</shortdescription>
<description> 
</description>
<input>
     <param type="string" name="versionname">
     <description>Version name </description>
     <value>""</value>
     </param>
     <param type="string" name="comment">
     <description>Comment for this flag table </description>
     <value>""</value>
     </param>
     <param type="string" name="merge">
     <description>merge type </description>
     <value>""</value>
     </param>
</input>
<returns type="bool"/>
</method>

 
<!-- ********************************************************************** -->

    <method type="function" name="restoreflagversion">
   <shortdescription>*** \n Restore flags from a saved flag_version. 
			\n versionname : name of flag version to restore to main table
			\n merge : Type of operation to perform during restoration.
			\n        merge = replace  : replaces the main table flags.
			\n        merge = and   : logical AND with main table flags
			\n        merge = or    : logical OR with main table flags
			\n        Default : replace.
 			  \n ***</shortdescription>
<description> 
</description>
<input>
     <param type="stringArray" name="versionname">
     <description>Version name </description>
     <value>""</value>
     </param>
     <param type="string" name="merge">
     <description>merge type </description>
     <value>""</value>
     </param>
</input>
<returns type="bool"/>
</method>

 
<!-- ********************************************************************** -->


    <method type="function" name="deleteflagversion">
   <shortdescription>*** \n Delete a saved flag_version. 
 			   ***</shortdescription>
<description> 
</description>
<input>
     <param type="stringArray" name="versionname">
     <description>Version name </description>
     <value>""</value>
     </param>
</input>
<returns type="bool"/>
</method>
 
<!-- ********************************************************************** -->

    <method type="function" name="getflagversionlist">
   <shortdescription>*** \n Print out a list of saved flag_versions. 
 			  ***</shortdescription>
<description> 
Print out the list of flag versions in the MS, unless the parameter printflags=False. The list of names is returned.
</description>
<input>
     <param type="bool" name="printflags">
     <description>Print flagversions in logger?</description>
     <value>true</value>
     </param>
</input>
<returns type="stringArray"/>
</method>

 
<!-- ********************************************************************** -->



</tool>

</casaxml>


<!-- ********************************************************************** -->
<!-- ********************************************************************** -->
<!-- ********************************************************************** -->


<!-- ********************************************************************** -->
<!--
   <method type="function" name="settimemed">
   <shortdescription>Sets up the time-median flagging method</shortdescription>
   
<description> 

The {\tt timemed} method uses a median-in-time filter. It works by computing a
sliding median of some value $d_{cbt}$ (where $c$ is frequency channel, $b$ is
baseline, and $t$ is time slot), as specified by the {\tt expr} parameter (see 
the general \htmlref{flag module description} {flag} for details
of how {\tt expr} determines $d$.) The sliding median is computed  in time, on
a per-channel, per-baseline basis: 

\[ 
m_{cbt} = {\rm median}\lbrace d_{cbt'}, \mbox{~where~} |t'-t| \leq\delta \rbrace 
\]

(where $\delta$ is given by the {\tt hw} parameter.) Then, a median absolute deviation
(MAD) of the data with respect to the median is computed on a per-row basis:

\[ 
M_{bt} = {\rm median}\lbrace |d_{cbt}-m_{cbt}|, \mbox{~for all~} c\rbrace
\]

(For single-channel data, $M_{bt}\equiv m_{0bt}$.) $M_{bt}$ is then smoothed 
by applying a sliding median in time:

\[
\tilde M_{bt} = {\rm median}\lbrace M_{bt'}, \mbox{~where~} |t'-t| \leq 
\tilde\delta \rbrace 
\]

(where $\tilde\delta$ is given by the {\tt rowhw} parameter.) All points where

\[
|d_{cbt}-m_{cbt}|&gt;\theta\tilde M_{bt}
\] 

are then flagged. The threshold level $\theta$ is given by the {\tt thr}
parameter.

In addition, {\tt timemed} can also flag entire rows based on their MAD. This
 is only performed for line data (specifically, when there are at least 10 
channels per row), and may be explicitly disabled by specifying {\tt norow=T}.
 To do this, it first computes a per-baseline MAD of the MAD:

\[ 
\hat M_b = {\rm median}\lbrace |M_{bt}-\tilde M_{bt}|, \mbox{~for all~} 
t\rbrace
\]

and flags rows where $|M_{bt}-\tilde M_{bt}|&gt;\hat\theta\hat M_b$, where
$\hat\theta$ is given by the {\tt rowthr} parameter.

{\tt Timemed} will iterate over the measurement set : and compute $m_{cbt}$
:  only once. Existing flags are taken into account at this time (unless {\tt
fignore} is specified). MADs are then computed and recomputed iteratively,
dropping flagged points and rows, until convergence is achieved (i.e. no more
flags are raised). Since $m_{cbt}$ is {\bf not} recomputed as new flags are
raised, running this method a second time may sometimes be of use.

</description>
<input>

     <param type="double" name="thr">
     <description>Flagging threshold</description>
     <value>5.0</value>
     </param>

     <param type="int" name="hw">
     <description>Half-window for the sliding median, if time slots is less than 
4 times half window, ignoring this chunk</description>
     <value>10</value>
     </param>

     <param type="double" name="rowthr">
     <description>Row flagging threshold</description>
     <value>10.0</value>
     </param>

     <param type="int" name="rowhw">
     <description>Half-window for the sliding median of the MAD</description>
     <value>10</value>
     </param>

     <param type="bool" name="norow">
     <description>Disable row flagging</description>
     <value>false</value>
     </param>

     <param type="string" name="column">
     <description>Which column to base flagging on</description>
     <value>MODEL</value>
     <value>CORR</value>
     <value>DATA</value>
     </param>

     <param type="string" name="expr">
     <description>Expression to use</description>
     <value>ABS I</value>
     </param>

     <param type="bool" name="fignore">
     <description>Ignore existing flags</description>
     <value>false</value>
     </param>
</input>
<returns type="bool"/>
<example>
- fg:=flag('3C273XC1.MS')
- fg.setdata()
- fg.settimemed(thr=5,hw=5,expr="- ABS RR LL")
</example>
</method>

-->
<!-- ********************************************************************** -->
<!--
   <method type="function" name="setnewtimemed">
   <shortdescription>Sets up the new time-median flagging method</shortdescription>
   
<description> 

The {\tt newtimemed} method uses a median-in-time filter. It follows the 
procedure of timemed but considering a median value from all time slots in a 
chunk.

The median is computed on a per-channel, per-baseline basis. The {\tt thr} 
parameter multiplying the standard deviation of the data in a chunk sets the 
threshold for flagging. If the {\tt thr} parameter is specified 
(e.g. {\tt thr} = 3), all points with greater than three standard deviations 
away from the median are flagged. 

</description>
<input>

     <param type="double" name="thr">
     <description>Flagging threshold</description>
     <value>3.0</value>
     </param>

     <param type="string" name="column">
     <description>Which column to base flagging on</description>
     <value>MODEL</value>
     <value>CORR</value>
     <value>DATA</value>
     </param>

     <param type="string" name="expr">
     <description>Expression to use</description>
     <value>ABS I</value>
     </param>

     <param type="bool" name="fignore">
     <description>Ignore existing flags</description>
     <value>false</value>
     </param>
</input>
<returns type="bool"/>
<example>
- fg:=flag('H031121.MS')
- fg.setdata()
- fg.setnewtimemed(thr=5, expr="ABS RR")
- fg.run()
</example>
</method>

-->
<!-- ********************************************************************** -->
<!--
   <method type="function" name="setfreqmed">
   <shortdescription>Sets up the freq-median flagging method</shortdescription>
   
<description>

The {\tt freqmed} method uses a median-in-frequency filter. It is very similar to
{\tt timemed}, except that it is based on a sliding median in frequency:

\[ 
m_{cbt} = {\rm median}\lbrace d_{c\prime bt}, \mbox{~where~} |c\prime-c| \leq \delta \rbrace 
\]

In all other respects this method is identical to {\tt timemed}, hence we refer you
you to the \htmlref{{\tt settimemed} description}{flag:flagger.settimemed} for 
all details.

</description>
<input>

     <param type="double" name="thr">
     <description>Flagging threshold</description>
     <value>5.0</value>
     </param>

     <param type="int" name="hw">
     <description>Half-window for the sliding median</description>
     <value>10</value>
     </param>

     <param type="double" name="rowthr">
     <description>Row flagging threshold</description>
     <value>10.0</value>
     </param>

     <param type="int" name="rowhw">
     <description>Half-window for the sliding median of the MAD</description>
     <value>10</value>
     </param>

     <param type="string" name="column">
     <description>Which column to base flagging on</description>
     <value>MODEL"</value>
     <value>CORR"</value>
     <value>DATA</value>
     </param>

     <param type="string" name="expr">
     <description>Expression to use</description>
     <value>ABS I`</value>
     </param>

     <param type="bool" name="fignore">
     <description>Ignore existing flags</description>
     <value>false</value>
     </param>
</input>
<returns type="bool"/>
<example>
- fg:=flag('3C273XC1.MS')
- fg.setdata()
- fg.setfreqmed(thr=5,hw=5,expr="- ABS RR LL")
</example>
</method>

 -->
<!-- ********************************************************************** -->

<!--
   <method type="function" name="setsprej">
   <shortdescription>Sets up the spectral rejection flagging method</shortdescription>
   
<description> 

The {\tt sprej} method works by fitting a user-specified segment of the
spectrum (presumably, the continuum) by a polynomial. It then flags entire rows
based on the chi-square statistic of the fit, in a manner similar to {\tt
timemed}. Please refer to \htmlref{{\tt
setimemed}}{flag:flagger.settimemed}  for detailed math, substituting
$\chi^2_{bt}$ for $M_{bt}$. The value that is actually fitted  is specified via
the {\tt expr} parameter (see  the general \htmlref{flag module}{flag
module} description for details).

The segement to be fitted can be specified as a range of channel indices
(1-based) or frequencies. Frequencies may be given as string measures ({\tt
"1.4GHz"}) or float values (units of MHz assumed). A vector of two values
[C1,C2] specifies the segment from C1 to C2, inclusive. Several disjoint
segments may be specified with a 2N vector or a (2,N) matrix.

For a measurement set containing multiple spectral windows, you can set the
{\tt region} argument to a record of records, with each sub-record containing
{\tt spwid} and {\tt fq} and/or {\tt chan} fields, specifying the segments of
a specific spectral window. See examples below.

</description>
<input>

     <param type="int" name="ndeg">
     <description>Number of degrees for polynomial</description>
     <value>2</value>
     </param>

     <param type="double" name="rowthr">
     <description>Flagging threshold, in MADs of $\chi^2$</description>
     <value>5.0</value>
     </param>

     <param type="int" name="rowhw">
     <description>Half-window for the sliding median</description>
     <value>6</value>
     </param>

     <param type="bool" name="norow">
     <description>Disable row flagging</description>
     <value>false</value>
     </param>

     <param type="int" name="spwid">
     <description>Spectral window number (0-based), or -1 for 
all windows</description>
     <value>-1 </value>
     </param>
     <param type="intArray" name="chan">
     <description>Range of channels (0-based). Either ``fq'' or ``chan'' must be
specified, 2N or (2,N).</description>
     <value type="vector">
     <value>-1</value>
     <value>-1</value>
     </value>
     </param>

     <param type="any" name="region">
	     <any type="record"/>
     <description>A compound spectral segment specification (see
example)</description>
     <value></value>
     </param>

     <param type="string" name="column">
     <description>Which column to base flagging on</description>
     <value>MODEL</value>
     <value>CORR"</value>
     <value>DATA</value>
     </param>

     <param type="string" name="expr">
     <description>Expression to use</description>
     <value>ABS I</value>
     </param>

     <param type="bool" name="fignore">
     <description>Ignore existing flags</description>
     <value>false</value>
     </param>
</input>
<returns type="bool"/>
<example>
- fg:=flag('3C273XC1.MS')
- fg.setdata()
# use segments 807-807.5 and 809-809.5 MHz for fitting
- fg.setsprej(fq=[807,807.5,809,809.5)) 
...
# use channels 10-20 and 30-40
- fg.setsprej(chan=[[10,20],[30,40]])
...
# use different segements in different spectral windows
- region := [=]
- region[1] := [ spwid=1,fq="1.4GHz 1.401GHz" ]
- region[2] := [ spwid=2,chan=[10,20] ]
- region[3] := [ spwid=4,chan=[50,60] ]
- fg.setsprej(region=region)
</example>
</method>

-->
<!-- ********************************************************************** -->

<!--
   <method type="function" name="setuvbin">
   <shortdescription>Sets up the UV Binner flagging method</shortdescription>
   
<description>

The {\tt uvbin} method works by binning the data on a {\em value} vs.
UV-distance plane ({\em value} is determined by the {\tt expr} parameter : see
the general \htmlref{flag module description}{flag} for a description
of this mechanism.) Data in underpopulated bins is then flagged. 

The cut-off point for flagging may be expressed in one of two ways:

\begin{itemize} 

\item If the {\tt maxpop} parameter is specified (e.g. {\tt maxpop=4}), all
bins with less than {\tt maxpop} points are flagged. 

\item If the {\tt thr} parameter is specified, a probability cut-off is
selected. This is done as follows. The cumulative probability $p(N)$, defined
as the probability for a given point to reside in a bin of a population $\le
N$, is first computed. All bins of population $N$, where $p(N)&lt;${\tt thr}, 
are then flagged.

In simpler terms, using {\tt thr=0.01} will flag up to 1\% of your data
points, beginning with the least populous bins. I.e., first the single-point
bins are flagged, then the 2-point bins, and so on, up to the $N-1$-point
bins, where $N$ is such that flagging the $N$-point bins would exceed 1\% of all
data points. 

\item When both {\tt maxpop} and {\tt thr} are specified, {\tt uvbin} will
use the higher of the two resulting cut-offs. 

\end{itemize}

{\tt Uvbin} can be asked to produce a value vs. UV-distance plot, and a plot of
$p(N)$. These plots are attached to the flagging report. Uuse of the {\tt
econoplot} mode is recommended when dealing with medium-to-large data sets,
for significant reduction in plot file size and printing time.

</description>
<input>

     <param type="double" name="thr">
     <description>Population cut-off, as $p(N)$ value.</description>
     <value>0.0</value>
     </param>

     <param type="int" name="minpop">
     <description>Population cut-off, as minimum bin count. Either thr or
maxpop must be specified, or both.</description>
     <value>0</value>
     </param>

     <param type="intArray" name="nbins">
     <description>Number of bins (one number for both axes, or separate for
UV, value)</description>
     <value>50</value>
     </param>

     <param type="int" name="plotchan">
     <description>Channel number (0-based) to plot, T for middle channel, or -1 for no
plot</description>
     <value>-1</value>
     </param>

     <param type="bool" name="econoplot">
     <description>Produce an economical plot (crowded bins are not resolved)</description>
     <value>false</value>
     </param>

     <param type="string" name="column">
     <description>Which column to base flagging on</description>
     <value>MODEL</value>
     <value>CORR</value>
     <value>DATA</value>
     </param>

     <param type="string" name="expr">
     <description>Expression to use</description>
     <value>ABS I</value>
     </param>

     <param type="bool" name="fignore">
     <description>Ignore existing flags</description>
     <value>false</value>
     </param>
</input>
<returns type="bool"/>
<example>
- fg:=flag('3C273XC1.MS')
- fg.setdata()
- fg.setuvbin(nbins=[50,100],expr="- ABS RR LL",plotchan=40,econoplot=T)
</example>
</method>
 
-->
<!-- ********************************************************************** -->

<!-- ********************************************************************** -->

<!--
   <method type="function" name="run">
   <shortdescription>Executes a flagging run</shortdescription>
   
<description>

This function will perform a flagging run utilizing methods configured by prior
{\tt set{\em method}()} calls. It has a number of optional parameters affecting
various aspects of the flagging process:

\begin{itemize}

\item {\tt Run} will optionaly produce a graphical flagging report (plots
of flag density per baseline, antenna, time, etc.), both on-screen and in a
file. Either option may be turned on or off. To redirect hardcopy output, 
the  {\tt devfile} argument may be set to a filename for PostScript output, 
or  to a full PGPlot device specification (``file/device'').

\item The {\tt globparm} argument allows you to set parameters that are ``global'' to
all methods. For example, using {\tt globparm=$\lbrack$hw=10,fignore=T$\rbrack$} will cause
{\bf all} methods to use the given values for the {\tt hw} and {\tt fignore}
parameters, unless another value was explicitly set in the {\tt set{\em method}()}
call. In other words, {\tt globparm} takes precedence over default values, 
but not over {\tt set{\em method}()} arguments.

\item When using {\tt trial}, flagging is performed and flagging reports are
generated without writing the results back into the measurement set.

\item The {\tt reset} option clears all pre-existing flags from the FLAG and
FLAGROW columns of the measurement set prior to running the methods. If {\tt
trial} is specified as well, the MS is not modified, but all methods run as if
all flags were clear to begin with (in fact, {\tt reset} and {\tt trial} together is
equivalent to  {\tt globparm=$\lbrack$fignore=T$\rbrack$}.)

\end{itemize}

</description>
<input>

     <param type="any" name="globparm">
	     <any type="record"/>
     <description>Record of global method parameters</description>
     <value></value>
     </param>

     <param type="int" name="plotscr">
     <description>Number of plots per window for on-screen flagging
report, or default for no report</description>
     <value>0</value>
     </param>

     <param type="int" name="plotdev">
     <description>Number of plots per page in hardcopy flagging report, 
0 for no report</description>
     <value>0</value>
     </param>

     <param type="string" name="devfile">
     <description>File or PGPlot device for hardcopy report</description>
     <value>flagreport.ps/ps</value>
     </param>

     <param type="bool" name="reset">
     <description>Reset pre-existing flags before running</description>
     <value>false</value>
     </param>

     <param type="bool" name="trial">
     <description>Do a trial run only</description>
     <value>false</value>
     </param>
</input>
<returns type="bool"/>
<example>
fg:=flag('3C273XC1.MS)
fg.setdata();
...
fg.setselect(autocorr=T,quack=[240,120])
...
fg.setuvbin(thr=.01)
...
fg.run()
</example>
</method>

--> 
<!-- ********************************************************************** -->
 



