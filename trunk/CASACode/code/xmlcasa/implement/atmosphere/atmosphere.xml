<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>
<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd
file:///opt/casa/code/xmlcasa/xml/casa.xsd">


   <tool name="atmosphere" module="atmosphere">
   <shortdescription>Atmosphere model</shortdescription>


<code>
	<include>xmlcasa/atmosphere/atmosphere_forward.h</include>
<private>
	#include &lt;xmlcasa/atmosphere/atmosphere_private.h&gt;
</private>
</code>
 
   <method type="constructor" name="atmosphere">
   <shortdescription>Construct an atmosphere tool</shortdescription>
   
<description>
This is used to construct an {\tt atmosphere} tool.
</description>
<input>
</input>
<returns type="atmosphere"/>
<example>
A default atmosphere tool is not created automatically during casapy
startup.  Manual tool construction is done this way:

attool = casac.homefinder.find_home_by_name('atmosphereHome')
at = attool.create()

</example>
</method>

   <method type="function" name="listAtmosphereTypes">
   <shortdescription>Returns a list of atmospheric types used by ATM.
   </shortdescription>
<description>
Returns a list of index numbers and corresponding atmosphere types
used by the ATM library.
</description>
   <returns type="stringArray">List of index - atmosphere type pairs
   </returns>
<example>

"""
#
at.listAtmosphereTypes()
#['1 - tropical', '2 - midlatSummer', '3 - midlatWinter',
# '4 - subarcticSummer', '5 - subarcticWinter']
#
"""

</example>
   </method>


   <method type="function" name="initAtmProfile">
   <shortdescription>Set initial atmospheric profile for atmosphere tool
   </shortdescription>
   
<description>
An atmospheric profile is composed of 4 quantities as a function of
altitude z:

    * the layer thickness
    * the pressure P
    * the temperature T and
    * the gas densities for H2O, O3, CO and N2O.


This method is needed for computing the absorption and phase
coefficients, as well as for performing radiative transfer
calculations (only layer thickness/T are needed).

This method builds an atmospheric profile that can be used to calculate
absorption and phase coefficients, as well as to perform forward
and/or retrieval radiative transfer calculations. It is composed of a
set of parameters needed to build a layer thickness/P/T/gas densities
densities profile from simple parameters currently available at
observatories (from weather stations for example) using functions from
the ATM library. The set of input parameters consists of the pressure
P, the temperature T and the relative humidity at the ground, the
altitude of the site, the tropospheric temperature lapse rate,... The
profile is built as: thickness of the considered atmospheric layers
above the site, and mean P,T,H2O,O3,CO,N2O in them. The total number
of atmospheric layers in the particular profile is also available (a
negative value indicates an error).  The zenith column of water vapor
can be calculated by simply integrating the H2O profile.
</description>
<input>

     <param type="double" direction="in" name="altitude" units="m">
     <description>Site altitude - Quantity with units of altitude, meter
       </description>
     <value>5000.</value>
     </param>

     <param type="double" direction="in" name="temperature" units="K">
     <description>Ambient Temperature - Quantity with units of temperature, K
       </description>
     <value>270.0</value>
     </param>

     <param type="double" direction="in" name="pressure" units="mbar">
     <description>Ambient pressure - Quantity with units of pressure, mbar
       </description>
     <value>560.0</value>
     </param>

     <param type="double" direction="in" name="maxAltitude" units="km">
     <description>altitude of the top pf the modelled atmosphere -
        Quantity with dimension of length, and units of kilometer
        </description>
     <value>48.0</value>
     </param>

     <param type="double" direction="in" name="humidity">
     <description>used to guess water (0-100)</description>
     <value>20.0</value>
     </param>

     <param type="double" direction="in" name="dTem_dh" units="K/km">
     <description>the derivative of temperature with respect to height
         - Quantity with units of K/km</description>
     <value>-5.6</value>
     </param>

     <param type="double" direction="in" name="dP" units="mbar">
     <description>initial pressure step - 
        Quantity with the units of pressure, mb</description>
     <value>10.0</value>
     </param>

     <param type="double" direction="in" name="dPm">
     <description>pressure multiplicative factor for steps</description>
     <value>1.2</value>
     </param>

     <param type="double" direction="in" name="h0" units="km">
     <description>scale height for water( exp distribution ) -
       Quantity with the dimension of length, and units of kilometer </description>
     <value>2.0</value>
     </param>

     <param type="int" direction="in" name="atmType">
     <description> atmospheric type
         1(tropical),2(mid latitude summer),3(mid latitude winter),
         4(subarctic summer),5(subarctic winter), dimensionless
        </description>
     <value>1</value>
     </param>
</input>
<returns type="string">String displaying input values.</returns>
<example>

tmp = quantity(270.0,'K')
pre = quantity(560.0,'mbar')
hum = 20.0
alt = quantity(5000,'m')
h0  = quantity(2.0,'km')
wvl = quantity(-5.6,'K/km')
mxA = quantity(48,'km')
dpr = quantity(10.0,'mbar')
dpm = 1.2
att = 1
myatm = at.initAtmProfile(alt, tmp, pre, mxA, hum, wvl, dpr, dpm, h0, att)

</example>
</method>

 
   <method type="function" name="updateAtmProfile">
   <shortdescription>Update basic atmospheric parameters of atmosphere tool
   </shortdescription>
   
<description>
This is used to update the {\tt atmosphere} tool when basic
atmospheric parameters.change.
</description>
<input>

     <param type="double" direction="in" name="altitude" units="m">
     <description>Site altitude - Quantity with units of altitude, meter
       </description>
     <value>5000.</value>
     </param>

     <param type="double" direction="in" name="temperature" units="K">
     <description>Ambient ground temperature - Quantity with units of temperature, K
       </description>
     <value>270.0</value>
     </param>

     <param type="double" direction="in" name="pressure" units="mbar">
     <description>Ambient ground pressure - Quantity with units of pressure, mbar
       </description>
     <value>560.0</value>
     </param>

     <param type="double" direction="in" name="humidity">
     <description>Relative humidy used to guess water (0-100)</description>
     <value>20.0</value>
     </param>

     <param type="double" direction="in" name="dTem_dh" units="K/km">
     <description>Tropospheric Lapse Rate - the derivative of temperature with respect to height
         - Quantity with units of K/km</description>
     <value>-5.6</value>
     </param>

     <param type="double" direction="in" name="h0" units="km">
     <description>scale height for water( exp distribution ) -
       Quantity with the dimension of length, and units of kilometer </description>
     <value>2.0</value>
     </param>
</input>
<returns type="string">String of current values.</returns>
<example>

new_tmp = quantity(275.0,'K')
print at.updateAtmProfile(alt, new_tmp, pre, hum, wvl, h0)

</example>
</method>

   <method type="function" name="getBasicAtmParms">
   <shortdescription>Gets the current basic atmospheric parameters of the model.
   </shortdescription>
   <output>

     <param type="double" direction="out" name="altitude" units="m">
     <description>Site altitude - Quantity with units of altitude, meter
       </description>
     </param>

     <param type="double" direction="out" name="temperature" units="K">
     <description>Ambient ground temperature - Quantity with units of temperature, K
       </description>
     </param>

     <param type="double" direction="out" name="pressure" units="mbar">
     <description>Ambient pressure - Quantity with units of pressure, mbar
       </description>
     </param>

     <param type="double" direction="out" name="maxAltitude" units="km">
     <description>altitude of the top pf the modelled atmosphere -
        Quantity with dimension of length, and units of kilometer
        </description>
     </param>

     <param type="double" direction="out" name="humidity">
     <description>Ground relative humidity used to guess water (0-100)</description>
     </param>

     <param type="double" direction="out" name="dTem_dh" units="K/km">
     <description>Current Tropospheric Lapse Rate (the derivative of temperature with respect to height)
         - Quantity with units of K/km</description>
     </param>

     <param type="double" direction="out" name="dP" units="mbar">
     <description>initial pressure step - 
        Quantity with the units of pressure, mb</description>
     </param>

     <param type="double" direction="out" name="dPm">
     <description>pressure multiplicative factor for steps</description>
     </param>

     <param type="double" direction="out" name="h0" units="km">
     <description>Water vapor scale height ( exp distribution ) -
       Quantity with the dimension of length, and units of kilometer </description>
     </param>

     <param type="string" direction="out" name="atmType">
     <description> atmospheric type used to describe the behaviour above
         the tropopause.
         1(tropical),2(mid latitude summer),3(mid latitude winter),
         4(subarctic summer),5(subarctic winter), dimensionless
        </description>
     </param>
   </output>

   <returns type="string">Returns string listing of parameters.</returns>
<example>

print "Atmospheric type:   ", at.getBasicAtmParms()['atmType']
p = at.getBasicAtmParms()
print "Ground temperature: ", p['temperature'].value, p['temperature'].units
print p['return']           # a "pretty" listing of all the parameters

</example>
   </method>

   <method type="function" name="getNumLayers">
   <shortdescription>Returns the number of layers in the atmospheric profile.
   </shortdescription>
   <returns type="int"/>
<example>

p = at.getProfile()
for i in range(at.getNumLayers()):
        print p['thickness'].value[i],p['temperature'].value[i],p['water'].value[i],p['pressure'].value[i]

</example>
   </method>

 
   <method type="function" name="getGroundWH2O">
   <shortdescription>get the zenith column of water vapor</shortdescription>
   
<description>
Method to get the zenith column  of water vapor. It is computed by
simply integrating the H2O profile:
</description>
<returns type="Quantity"/>
<example>

w = at.getGroundWH2O()
print "Guessed water content: ", w.value, w.units

</example>
</method>

 
   <method type="function" name="getProfile">
   <shortdescription>get atmospheric profile</shortdescription>
   
<description>

Get the atmospheric profile.

</description>

<output>
     <param type="double"  name="thickness" units="m">
     <description>thickness of every atmospheric layer -
        Quantum with a vector value and unit of length, m
        </description>
     </param>

     <param type="double"  name="temperature" units="K">
     <description>temperature of every atmospheric layer -
      Quantum with a vector value and unit of temperature, K
       </description>
     </param>

     <param type="double"  name="watermassdensity" units="kg.m-3">
     <description>water vapor mass density content of every atmospheric layer -
        Quantum with a vector value and unit of kg.m-3
        </description>
     </param>

     <param type="double"  name="water" units="m-3">
     <description>water vapor content of every atmospheric layer -
        Quantum with a vector value and unit of m-3
        </description>
     </param>

     <param type="double"  name="pressure" units="Pa">
     <description>pressure of every atmospheric layer -
        Quantum with a vector value and unit of Pascal
        </description>
     </param>

     <param type="double"  name="O3" units="m-3">
     <description>O3 of every atmospheric layer -
        Quantum with a vector value and unit of m-3
        </description>
     </param>

     <param type="double"  name="CO" units="m-3">
     <description>CO of every atmospheric layer -
        Quantum with a vector value and unit of m-3
     </description>
     </param>

     <param type="double"  name="N2O" units="m-3">
     <description>N2O of every atmospheric layer -
        Quantum with a vector value and unit of m-3
     </description>
     </param>

</output>
<returns type="string">String displaying atmospheric profile</returns>

<example>

p = at.getProfile()
for i in range(at.getNumLayers()):
        print p['thickness'].value[i],p['temperature'].value[i],p['water'].value[i],p['pressure'].value[i]

print p['return']    # "pretty" listing of all layer parameters

</example>

</method>

 
   <method type="function" name="initSpectralWindow">
   <shortdescription>initialize spectral window</shortdescription>
   
<description>

function that defines a spectral window, computes absorption and emmision coefficients for this window,
using the above atmospheric parameters.

</description>

<input>


     <param type="int" direction="in" name="nbands">
     <description>number of spectral windows/bands</description>
     <value>1</value>
     </param>

     <param type="double" direction="in" name="fCenter" units="GHz">
     <description>center frequencies -
         Quantum with a vector value and unit of frequency, GHz
         </description>
     <value>90</value>
     </param>

     <param type="double" direction="in" name="fWidth" units="GHz">
     <description>frequency width of band - Quantum with a vector value and unit of frequency, GHz
        </description>
     <value>0.64</value>
     </param>

     <param type="double" direction="in" name="fRes" units="GHz">
     <description>resolution inside band -
        Quantum with a vector value and unit frequency, GHz.
        Default is for a single frequency.
        </description>
     <value>0.0</value>
     </param>

</input>

<returns type="int">Number of channels in the first spectral window</returns>

<example>

nb=1
fC=quantity(88.,'GHz')
fW=quantity(.5,'GHz')
fR=quantity(.5,'GHz')
at.initSpectralWindow(nb,fC,fW,fR)

nb=2
fC=quantity([88.,90.],'GHz')
fW=quantity([.5,.5],'GHz')
fR=quantity([.125,.125],'GHz')
at.initSpectralWindow(nb,fC,fW,fR)

</example>

</method>

 
   <method type="function" name="addSpectralWindow">
   <shortdescription>add a new spectral window</shortdescription>
   
<description>


Add a new spectral window, uniformly sampled, this spectral window
having no sideband.

</description>

<input>

     <param type="double" direction="in" name="fCenter" units="GHz">
     <description>frequencies -
         Quantum with a double value and unit of frequency, GHz
         </description>
     <value>350</value>
     </param>

     <param type="double" direction="in" name="fWidth" units="GHz">
     <description>frequency width of band - Quantum with a double value and unit of frequency, GHz
        </description>
     <value>0.008</value>
     </param>

     <param type="double" direction="in" name="fRes" units="GHz">
     <description>resolution inside band -
        Quantum with a double value and unit frequency, GHz
        </description>
     <value>0.002</value>
     </param>

</input>

<returns type="int">Number of channels in new spectral window</returns>

<example>

fC2 = quantity(350.0,'GHz')
fW2 = quantity(0.008,'GHz')
fR2 = quantity(0.002,'GHz')
nc = at.addSpectralWindow(fC2,fW2,fR2)
print "New spectral window has ", nc, " channels"

</example>

</method>

 
   <method type="function" name="getNumSpectralWindows">
   <shortdescription>Get number of spectral windows</shortdescription>

<returns type="int">Number of spectral windows</returns>
<example>

numSpw = at.getNumSpectralWindows()
print "There are ", numSpw, " spectral windows"

</example>
</method>


   <method type="function" name="getNumChan">
   <shortdescription>return the number of channels of ith band</shortdescription>
   
<description>
Return the number of channels of ith band ( passes in as parameter ).
</description>

<input>
     <param type="int" direction="in" name="spwid">
     <description>Int standing for identifier of bands (0-based)</description>
     <value>0</value>
     </param>
</input>

<returns type="int"> Int, the number of channels of the given band.</returns>

<example>

for spwid in range(at.getNumSpectralWindows()):
        numCh = at.getNumChan(spwid)
        print "Spectral window ", spwid, " has ", numCh, " frequency channels"

</example>
</method>

 
   <method type="function" name="getRefChan">
   <shortdescription>Get the reference channel of a given spectral window
   </shortdescription>
<description>
Return the reference channel of the given spectral window
</description>
<input>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>
</input>
<returns type="int"> Reference channel number.</returns>
<example>

rc = at.getRefChan()
print "Reference channel retrieved: ", rc

</example>
</method>

 
   <method type="function" name="getRefFreq">
   <shortdescription>Get the reference frequency of given spectral window
   </shortdescription>
<description>
Return the reference frequency of the given spectral window
</description>
<input>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>
</input>
<returns type="Quantity">Reference channel frequency.</returns>
<example>

rf = at.getRefFreq()
print "Reference frequency retrieved: ", rf.value, rf.units

</example>
</method>

 
   <method type="function" name="getChanSep">
   <shortdescription>Get the channel separation for regularly spaced grid for spectral window
   </shortdescription>
<description>
Return the channel separation of the given spectral window
</description>
<input>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>
</input>
<returns type="Quantity">Channel separation.</returns>
<example>

cs = at.getChanSep()
print "Channel separation retrieved: ", cs.value, cs.units

</example>
</method>

 
   <method type="function" name="getChanFreq">
   <shortdescription>Get the channel frequency for a given grid point for the specified spectral window.
   </shortdescription>
   <description>
      Return the channel frequency for a given grid point for the specified spectral window.
   </description>
   <input>
      <param type="int" direction="in" name="chanNum">
      <description>Int standing for channel number (0-based)</description>
      <value>0</value>
     </param>

      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>

   </input>
   <returns type="Quantity">Channel frequency.</returns>
   <example>
   
for spwid in range(at.getNumSpectralWindows()):
        numCh = at.getNumChan(spwid)
        print "Spectral window ", spwid, " has ", numCh, " frequency channels"
        for n in range(numCh):
                freq = at.getChanFreq(n, spwid)
                print "Channel ", n, " Frequency:", freq.value, freq.units

    
    </example>
    </method>

 
   <method type="function" name="getSpectralWindow">
   <shortdescription>Get the spectral grid for the specified spectral window.
   </shortdescription>
   <description>
      Return the spectral grid for the specified spectral window.
   </description>
   <input>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>
   </input>
   <returns type="Quantity">Spectral grid.</returns>
   <example>
   
print at.getSpectralWindow().value,at.getSpectralWindow().units

sg = at.getSpectralWindow()
for i in range(len(sg.value)):
    print sg.value[i], sg.units

    
    </example>
    </method>

 
   <method type="function" name="getChanNum">
   <shortdescription>Get the grid position for a given frequency in the specified spectral window.
   </shortdescription>
   <description>
      Return the channel number for given frequency in the specified
      spectral window relative to the reference channel number.
   </description>
   <input>
      <param type="double" direction="in" name="freq" units="GHz">
      <description>Frequency</description>
      </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>
   </input>
   <returns type="double">Channel number.</returns>
   <example>
   
In [2]: at.getRefFreq().value, at.getRefFreq().units
Out[2]: (90.0, 'GHz')

In [3]: print at.getChanSep().value, at.getChanSep().units
10.0 MHz

In [4]: at.getRefChan()
Out[4]: 32L

In [5]: at.getChanNum(quantity(90.,'GHz'))
Out[5]: 0.0

In [6]: at.getChanNum(quantity(90.,'GHz'),0)
Out[6]: 0.0

In [7]: at.getChanNum(quantity(90.08,'GHz'),0)
Out[7]: 8.0

In [8]: at.getChanNum(quantity(89.985,'GHz'),0)
Out[8]: -1.5

In [9]: at.getChanNum(quantity(89.98,'GHz'),0)
Out[9]: -2.0

    
    </example>
    </method>

 
   <method type="function" name="getBandwidth">
   <shortdescription>
Get the frequency range encompassing the list of frequency grid points for the specified spectral window.
   </shortdescription>
   <description>
Get the frequency range encompassing the list of frequency grid points for the specified spectral window.
   </description>
   <input>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>
   </input>
   <returns type="Quantity">Bandwidth.</returns>
   <example>
   
print "Total bandwidth retrieved: ", at.getBandwidth().value, at.getBandwidth().units

    
    </example>
    </method>

 
   <method type="function" name="getMinFreq">
   <shortdescription>
Get lowest frequency channel for the specified spectral window.
   </shortdescription>
   <description>
Get lowest frequency channel for the specified spectral window.
   </description>
   <input>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>
   </input>
   <returns type="Quantity">Lowest frequency.</returns>
   <example>
   
print "Frequency range: from ", at.getMinFreq().value, " to ", at.getMaxFreq().value, at.getMinFreq().units

    
    </example>
    </method>

 
 
   <method type="function" name="getMaxFreq">
   <shortdescription>
Get highest frequency channel for the specified spectral window.
   </shortdescription>
   <description>
Get highest frequency channel for the specified spectral window.
   </description>
   <input>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>
   </input>
   <returns type="Quantity">Highest frequency.</returns>
   <example>
   
print "Frequency range: from ", at.getMinFreq().value, " to ", at.getMaxFreq().value, at.getMaxFreq().units
    
    </example>
    </method>

 
 
   <method type="function" name="getDryOpacity">
   <shortdescription>get the integrated Dry Opacity along the atmospheric path for channel nc in spectral window swpId</shortdescription>
   
<description>

Get the integrated Dry Opacity for one channel in a band.

</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>
</input>
<returns type="double">The dryOpacity of channel nc in band spwid.</returns>

<example>

nb = 1
fC = quantity([850.0],'GHz')
fW = quantity([0.5],'GHz')
fR = quantity([0.5],'GHz')
at.initSpectralWindow(nb,fC,fW,fR)
print "Total Dry Opacity at ", fC.value, fC.units, " for 1.0 air mass: ", at.getDryOpacity()


</example>

</method>

   <method type="function" name="getDryContOpacity">
   <shortdescription>get the integrated Dry Continuum Opacity along the atmospheric path for channel nc in spectral window spwid</shortdescription>
   
<description>

Get the integrated Dry Continuum Opacity for one channel in a band.

</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>
</input>
<returns type="double">The dryContOpacity of channel nc in band spwid.</returns>

<example>

nb = 1
fC = quantity([850.0],'GHz')
fW = quantity([0.5],'GHz')
fR = quantity([0.5],'GHz')
at.initSpectralWindow(nb,fC,fW,fR)
print "Total Dry Cont Opacity at ", fC.value, fC.units, " for 1.0 air mass: ", at.getDryContOpacity()


</example>

</method>

   <method type="function" name="getO2LinesOpacity">
   <shortdescription>get the integrated O2 Lines Opacity along the atmospheric path for channel nc in spectral window spwid</shortdescription>
   
<description>

Get the integrated O2 Lines Opacity for one channel in a band.

</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>
</input>
<returns type="double">The O2LinesOpacity of channel nc in band spwid.</returns>

<example>

nb = 1
fC = quantity([850.0],'GHz')
fW = quantity([0.5],'GHz')
fR = quantity([0.5],'GHz')
at.initSpectralWindow(nb,fC,fW,fR)
print "Total O2 Lines Opacity at ", fC.value, fC.units, " for 1.0 air mass: ", at.getO2LinesOpacity()


</example>

</method>

   <method type="function" name="getO3LinesOpacity">
   <shortdescription>get the integrated O3 Lines Opacity along the atmospheric path for channel nc in spectral window spwid</shortdescription>
   
<description>

Get the integrated O3 Lines Opacity for one channel in a band.

</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>
</input>
<returns type="double">The O3LinesOpacity of channel nc in band spwid.</returns>

<example>

nb = 1
fC = quantity([850.0],'GHz')
fW = quantity([0.5],'GHz')
fR = quantity([0.5],'GHz')
at.initSpectralWindow(nb,fC,fW,fR)
print "Total O3 Lines Opacity at ", fC.value, fC.units, " for 1.0 air mass: ", at.getO3LinesOpacity()


</example>

</method>

   <method type="function" name="getCOLinesOpacity">
   <shortdescription>get the integrated CO Lines Opacity along the atmospheric path for channel nc in spectral window spwid</shortdescription>
   
<description>

Get the integrated CO Lines Opacity for one channel in a band.

</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>
</input>
<returns type="double">The COLinesOpacity of channel nc in band spwid.</returns>

<example>

nb = 1
fC = quantity([850.0],'GHz')
fW = quantity([0.5],'GHz')
fR = quantity([0.5],'GHz')
at.initSpectralWindow(nb,fC,fW,fR)
print "Total CO Lines Opacity at ", fC.value, fC.units, " for 1.0 air mass: ", at.getCOLinesOpacity()


</example>

</method>

   <method type="function" name="getN2OLinesOpacity">
   <shortdescription>get the integrated N2O Lines Opacity along the atmospheric path for channel nc in spectral window spwid</shortdescription>
   
<description>

Get the integrated N2O Lines Opacity for one channel in a band.

</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>
</input>
<returns type="double">The N2OLinesOpacity of channel nc in band spwid.</returns>

<example>

nb = 1
fC = quantity([850.0],'GHz')
fW = quantity([0.5],'GHz')
fR = quantity([0.5],'GHz')
at.initSpectralWindow(nb,fC,fW,fR)
print "Total N2O Lines Opacity at ", fC.value, fC.units, " for 1.0 air mass: ", at.getN2OLinesOpacity()


</example>

</method>

   <method type="function" name="getWetOpacity">
   <shortdescription>get the integrated Wet Opacity along the atmospheric path for channel nc in spectral window spwid</shortdescription>
   
<description>

Get the integrated Wet Opacity for one channel in a band.

</description>

<input>

      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>

</input>


<returns type="Quantity">The Wet Opacity of channel nc in band spwid. Units of mm-1.</returns>

<example>

for i in range(at.getNumSpectralWindows()):
        for j in range(at.getNumChan(i)):
                print "Frequency: ", at.getChanFreq(j,i).value, at.getChanFreq(j,i).units
                print "Wet opacity:", at.getWetOpacity(j,i).value, at.getWetOpacity(j,i).units, " for ", at.getUserWH2O().value, at.getUserWH2O().units, " H2O"


</example>

</method>

 
   <method type="function" name="getH2OLinesOpacity">
   <shortdescription>get the integrated H2O Lines Opacity along the atmospheric path for channel nc in spectral window spwid</shortdescription>
   
<description>

Get the integrated H2O Lines Opacity for one channel in a band.

</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>
</input>
<returns type="double">The H2OLinesOpacity of channel nc in band spwid.</returns>

<example>

nb = 1
fC = quantity([850.0],'GHz')
fW = quantity([0.5],'GHz')
fR = quantity([0.5],'GHz')
at.initSpectralWindow(nb,fC,fW,fR)
print "Total H2O Lines Opacity at ", fC.value, fC.units, " for 1.0 air mass: ", at.getH2OLinesOpacity()


</example>

</method>

   <method type="function" name="getH2OContOpacity">
   <shortdescription>get the integrated H2O Continuum Opacity along the atmospheric path for channel nc in spectral window spwid</shortdescription>
   
<description>

Get the integrated H2O Continuum Opacity for one channel in a band.

</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>
</input>
<returns type="double">The H2OContOpacity of channel nc in band spwid.</returns>

<example>

nb = 1
fC = quantity([850.0],'GHz')
fW = quantity([0.5],'GHz')
fR = quantity([0.5],'GHz')
at.initSpectralWindow(nb,fC,fW,fR)
print "Total H2O Cont Opacity at ", fC.value, fC.units, " for 1.0 air mass: ", at.getH2OContOpacity()


</example>

</method>

   <method type="function" name="getDryOpacitySpec">
   <shortdescription>get the integrated Dry optical depth along the atmospheric path on each channel of a band</shortdescription>
   
<description>

Get the integrated Dry optical depth along the atmospheric path on each channel in a band.

</description>

<output>


     <param type="doubleArray"  name="dryOpacity">
     <description>dry opacity for each channel</description>
     </param>

</output>

<input>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>
</input>

<returns type="int">The number of channels.</returns>

<example>

In [2]: s=at.getDryOpacitySpec()
In [3]: s
Out[3]:
{'dryOpacity': [0.12113794420465548,
                0.11890122206854335,
                0.11713584932434795,
                0.11572780449702716,
                0.11459567027114714,
                0.11368004975916192,
                0.11293678422232195,
                0.11233248854020933],
 'return': 8L}

</example>

</method>

   <method type="function" name="getWetOpacitySpec">
   <shortdescription>get the integrated Wet optical depth along the atmospheric path on each channel of a band</shortdescription>
   
<description>

Get the integrated optical Wet depth along the atmospheric path on each channel in a band.

</description>

<output>

     <param type="double"  name="wetOpacity" units="mm-1">
     <description>wet opacity for each channel in band -
        Quantum with a vector value and unit of mm-1
        </description>
     </param>
</output>
<input>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>

</input>


<returns type="int">The number of channels.</returns>

<example>

In [16]: sw=at.getWetOpacitySpec()

In [17]: sw['wetOpacity'].value
Out[17]:
[1.7225454913767393,
 1.7204246078103735,
 1.7188614166349163,
 1.7179243635081174,
 1.7177278069990962,
 1.7184525049248152,
 1.7204244157129918,
 1.7242351137518073]

In [18]: sw['return']
Out[18]: 8L

Another example:
for s in range(at.getNumSpectralWindows()):
        print "band", s
        for i in range(at.getNumChan(0)):
                print " - dryOpacity ", at.getDryOpacitySpec(s)['dryOpacity'][i], " wet Opacity/mm ", at.getWetOpacitySpec(s)['wetOpacity'].value[i]


</example>
</method>


   <method type="function" name="getDispersivePhaseDelay">
   <shortdescription>get the integrated zenith H2O Atmospheric Phase Delay</shortdescription>
   
<description>
Get the integrated zenith H2O Atmospheric Phase Delay (Dispersive part) 
for the current conditions, for channel number nc of spectral window spwid.
</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>

</input>

<returns type="Quantity">The integrated Atmospheric Phase Delay for channel nc in band spwid.</returns>

<example>

for spwid in range(numSpw):
        numCh = at.getNumChan(spwid)
        print "Spectral window ", spwid, " has ", numCh, " frequency channels"
        for n in range(numCh):
                freq = at.getChanFreq(n, spwid)
                print "Total Dispersive Phase Delay at ", freq.value, freq.units, " for 1.0 air mass: ", (at.getDispersivePhaseDelay(n,spwid).value)/(w.value),
" degrees per mm of water vapor (", ((100*at.getDispersivePhaseDelay(n,spwid).value)/(w.value))/(at.getNonDispersivePhaseDelay(n,spwid).value/w.value), "% of the Non-dispersive one )"


</example>
</method>


   <method type="function" name="getDispersiveWetPhaseDelay">
   <shortdescription>get the integrated dispersive wet Atmospheric Phase Delay</shortdescription>
   
<description>
Function to retrieve the integrated wet Atmospheric Phase Delay
(Dispersive part) along the atmospheric path corresponding to the 1st
guess water column.
</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>

</input>

<returns type="Quantity">The integrated dispersive Atmospheric Phase Delay for channel nc in band spwid.</returns>

<example>

for spwid in range(numSpw):
        numCh = at.getNumChan(spwid)
        print "Spectral window ", spwid, " has ", numCh, " frequency channels"
        for n in range(numCh):
                freq = at.getChanFreq(n, spwid)
                print "Total Dispersive Wet Phase Delay at ", freq.value, freq.units, " for 1.0 air mass: ", (at.getDispersiveWetPhaseDelay(n,spwid).value)/(w.value),
" degrees per mm of water vapor (", ((100*at.getDispersiveWetPhaseDelay(n,spwid).value)/(w.value))/(at.getNonDispersiveWetPhaseDelay(n,spwid).value/w.value), "% of the Non-dispersive one )"


</example>
</method>


   <method type="function" name="getNonDispersiveWetPhaseDelay">
   <shortdescription>get the integrated nondispersive wet Atmospheric Phase Delay</shortdescription>
   
<description>
Function to retrieve the integrated wet Atmospheric Phase Delay
(NonDispersive part) along the atmospheric path corresponding to the 1st
guess water column.
</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>

</input>

<returns type="Quantity">The integrated dispersive Atmospheric Phase Delay for channel nc in band spwid.</returns>

<example>

for spwid in range(numSpw):
        numCh = at.getNumChan(spwid)
        print "Spectral window ", spwid, " has ", numCh, " frequency channels"
        for n in range(numCh):
                freq = at.getChanFreq(n, spwid)
                print "Total Dispersive Wet Phase Delay at ", freq.value, freq.units, " for 1.0 air mass: ", (at.getDispersiveWetPhaseDelay(n,spwid).value)/(w.value),
" degrees per mm of water vapor (", ((100*at.getDispersiveWetPhaseDelay(n,spwid).value)/(w.value))/(at.getNonDispersiveWetPhaseDelay(n,spwid).value/w.value), "% of the Non-dispersive one )"


</example>
</method>

   <method type="function" name="getNonDispersiveDryPhaseDelay">
   <shortdescription>get the integrated nondispersive dry Atmospheric Phase Delay</shortdescription>
   
<description>
Function to retrieve the integrated dry Atmospheric Phase Delay
(NonDispersive part) along the atmospheric path corresponding to the 1st
guess water column.
</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>

</input>

<returns type="Quantity">The integrated dispersive Atmospheric Phase Delay for channel nc in band spwid.</returns>

<example>

for spwid in range(numSpw):
        numCh = at.getNumChan(spwid)
        print "Spectral window ", spwid, " has ", numCh, " frequency channels"
        for n in range(numCh):
                freq = at.getChanFreq(n, spwid)
                print "Total Dispersive Dry Phase Delay at ", freq.value, freq.units, " for 1.0 air mass: ", (at.getDispersiveDryPhaseDelay(n,spwid).value)/(w.value),
" degrees per mm of water vapor (", ((100*at.getDispersiveDryPhaseDelay(n,spwid).value)/(w.value))/(at.getNonDispersiveDryPhaseDelay(n,spwid).value/w.value), "% of the Non-dispersive one )"


</example>
</method>

   <method type="function" name="getNonDispersivePhaseDelay">
   <shortdescription>get the integrated zenith H2O Atmospheric Phase Delay (Non-Dispersive part)</shortdescription>
   
<description>
Get the integrated zenith H2O Atmospheric Phase Delay (Non-Dispersive
part) for the current conditions, for channel number nc of spectral
window spwid.
</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>

</input>

<returns type="Quantity">The integrated Atmospheric Phase Delay channel nc in band spwid.</returns>

<example>

for spwid in range(numSpw):
        numCh = at.getNumChan(spwid)
        print "Spectral window ", spwid, " has ", numCh, " frequency channels"
        for n in range(numCh):
                freq = at.getChanFreq(n, spwid)
                print "Total Dispersive Phase Delay at ", freq.value, freq.units, " for 1.0 air mass: ", (at.getDispersivePhaseDelay(n,spwid).value)/(w.value),
" degrees per mm of water vapor (", ((100*at.getDispersivePhaseDelay(n,spwid).value)/(w.value))/(at.getNonDispersivePhaseDelay(n,spwid).value/w.value), "% of the Non-dispersive one )"


</example>
</method>

 
   <method type="function" name="getDispersivePathLength">
   <shortdescription>get the integrated Atmospheric Dispersive Path</shortdescription>
   
<description>
Retrieve the integrated Atmospheric Path length (Dispersive part)
along the atmospheric path corresponding to the user water column
for channel nc in spectral window spwid.
</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>

</input>

<returns type="Quantity">The integrated Atmospheric Path Length for channel nc in band spwid.</returns>

<example>

w = at.getUserWH2O()
nb = 1
fC = quantity([850.0],'GHz')
fW = quantity([0.5],'GHz')
nfR = quantity([0.5],'GHz')
at.initSpectralWindow(nb,fC,fW,fR)
print "Total Dispersive Delay at ", fC.value, fC.units, " for 1.0 air mass: ", at.getDispersivePathLength().value /  w.value, " meters per mm of water vapor"
print "(",100*(at.getDispersivePathLength().value /  w.value)/(at.getNonDispersivePathLength().value / w.value), "% of the Non-dispersive one )"


</example>
</method>

   <method type="function" name="getDispersiveWetPathLength">
   <shortdescription>get the integrated wet Atmospheric Dispersive Path</shortdescription>
   
<description>
Retrieve the integrated wet Atmospheric Path length (Dispersive part)
along the atmospheric path corresponding to the 1st guess water column
for channel nc in spectral window spwid.
</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>

</input>

<returns type="Quantity">The integrated Atmospheric Path Length for channel nc in band spwid.</returns>

<example>

w = at.getGroundWH2O()
nb = 1
fC = quantity([850.0],'GHz')
fW = quantity([0.5],'GHz')
nfR = quantity([0.5],'GHz')
at.initSpectralWindow(nb,fC,fW,fR)
print "Total Dispersive Delay at ", fC.value, fC.units, " for 1.0 air mass: ", at.getDispersiveWetPathLength().value /  w.value, " meters per mm of water vapor"
print "(",100*(at.getDispersiveWetPathLength().value /  w.value)/(at.getNonDispersiveWetPathLength().value / w.value), "% of the Non-dispersive one )"


</example>
</method>

   <method type="function" name="getNonDispersiveWetPathLength">
   <shortdescription>get the integrated wet Atmospheric NonDispersive Path</shortdescription>
   
<description>
Retrieve the integrated wet Atmospheric Path length (NonDispersive part)
along the atmospheric path corresponding to the 1st guess water column
for channel nc in spectral window spwid.
</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>

</input>

<returns type="Quantity">The integrated Atmospheric Path Length for channel nc in band spwid.</returns>

<example>

w = at.getGroundWH2O()
nb = 1
fC = quantity([850.0],'GHz')
fW = quantity([0.5],'GHz')
nfR = quantity([0.5],'GHz')
at.initSpectralWindow(nb,fC,fW,fR)
print "Total Dispersive Delay at ", fC.value, fC.units, " for 1.0 air mass: ", at.getDispersiveWetPathLength().value /  w.value, " meters per mm of water vapor"
print "(",100*(at.getDispersiveWetPathLength().value /  w.value)/(at.getNonDispersiveWetPathLength().value / w.value), "% of the Non-dispersive one )"


</example>
</method>

   <method type="function" name="getNonDispersiveDryPathLength">
   <shortdescription>get the integrated dry Atmospheric NonDispersive Path</shortdescription>
   
<description>
Retrieve the integrated dry Atmospheric Path length (NonDispersive part)
along the atmospheric path corresponding to the 1st guess water column
for channel nc in spectral window spwid. 
</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>

</input>

<returns type="Quantity">The integrated Atmospheric Path Length for channel nc in band spwid.</returns>

<example>

w = at.getGroundWH2O()
nb = 1
fC = quantity([850.0],'GHz')
fW = quantity([0.5],'GHz')
nfR = quantity([0.5],'GHz')
at.initSpectralWindow(nb,fC,fW,fR)
print "Total Dispersive Delay at ", fC.value, fC.units, " for 1.0 air mass: ", at.getDispersiveDryPathLength().value /  w.value, " meters per mm of water vapor"
print "(",100*(at.getDispersiveDryPathLength().value /  w.value)/(at.getNonDispersiveDryPathLength().value / w.value), "% of the Non-dispersive one )"


</example>
</method>


   <method type="function" name="getO2LinesPathLength">
   <shortdescription>get the integrated O2 lines Path</shortdescription>
   
<description>
Retrieve the integrated Atmospheric Phase Delay (due to O2 Lines) along 
the atmospheric path corresponding to the 1st guess water column
for channel nc in spectral window spwid. 
</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>

</input>

<returns type="Quantity">The integrated Path Length for channel nc in band spwid.</returns>

<example>



</example>
</method>


   <method type="function" name="getO3LinesPathLength">
   <shortdescription>get the integrated O3 lines Path</shortdescription>
   
<description>
Retrieve the integrated Atmospheric Phase Delay (due to O3 Lines) along 
the atmospheric path corresponding to the 1st guess water column
for channel nc in spectral window spwid. 
</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>

</input>

<returns type="Quantity">The integrated Path Length for channel nc in band spwid.</returns>

<example>



</example>
</method>


   <method type="function" name="getCOLinesPathLength">
   <shortdescription>get the integrated CO lines Path</shortdescription>
   
<description>
Retrieve the integrated Atmospheric Path length (due to CO Lines) 
along the atmospheric path corresponding to the 1st guess water column 
for channel nc in spectral window spwid. 
</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>

</input>

<returns type="Quantity">The integrated Path Length for channel nc in band spwid.</returns>

<example>



</example>
</method>


   <method type="function" name="getN2OLinesPathLength">
   <shortdescription>get the integrated N2O lines Path</shortdescription>
   
<description>
Retrieve the integrated Atmospheric Path length (due to N2O Lines) 
along the atmospheric path corresponding to the 1st guess water column 
for channel nc in spectral window spwid. 
</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>

</input>

<returns type="Quantity">The integrated Path Length for channel nc in band spwid.</returns>

<example>



</example>
</method>


   <method type="function" name="getNonDispersivePathLength">
   <shortdescription>get the integrated Atmospheric Non-Dispersive Path</shortdescription>
   
<description>
Get the integrated zenith H2O Atmospheric Path length (Non-Dispersive 
part) for the current conditions, for channel nc in spectral window spwid.
</description>

<input>
      <param type="int" direction="in" name="nc">
      <description>Channel number (0-based; defaults to reference channel)</description>
      <value>-1</value>
     </param>
      <param type="int" direction="in" name="spwid">
      <description>Int standing for spectral window id (0-based)</description>
      <value>0</value>
     </param>

</input>

<returns type="Quantity">The integrated Atmospheric Path Length for channel nc in band spwid.</returns>

<example>

w = at.getUserWH2O()
nb = 1
fC = quantity([850.0],'GHz')
fW = quantity([0.5],'GHz')
nfR = quantity([0.5],'GHz')
at.initSpectralWindow(nb,fC,fW,fR)
print "Total Dispersive Delay at ", fC.value, fC.units, " for 1.0 air mass: ", at.getDispersivePathLength().value /  w.value, " meters per mm of water vapor"
print "(",100*(at.getDispersivePathLength().value /  w.value)/(at.getNonDispersivePathLength().value / w.value), "% of the Non-dispersive one )"


</example>
</method>


   <method type="function" name="getAbsH2OLines">
   <shortdescription>
Get H2O lines Absorption Coefficient at layer nl and frequency channel nf in spectral window spwid
   </shortdescription>
   
<description>
Accessor to get H2O lines Absorption Coefficient at layer nl,
spectral window spwid and channel nf.
</description>

<input>

     <param type="int"  name="nl">
     <description>atmospheric layer number
       </description>
     </param>

     <param type="int"  name="nf">
     <description>frequency channnel number
       </description>
     <value>0</value>
     </param>

     <param type="int"  name="spwid">
     <description>spectral window id </description>
     <value>0</value>
     </param>

</input>

<returns type="Quantity">
     <description>absorption coefficient for H2O lines -
     Quantum with unit of m-1
        </description>
</returns>

<example>

ac = at.getAbsH2OLines(0,0,0)
print "H2O lines absorption coefficient for layer 0, channel 0 is ", ac.value, ac.units

</example>
</method>


    <method type="function" name="getAbsH2OCont">
   <shortdescription>
Get H2O continuum Absorption Coefficient at layer nl and frequency channel nf in spectral window spwid
   </shortdescription>
   
<description>
Get H2O continuum Absorption Coefficient at layer nl, 
spectral window spwid and frequency channel nf
</description>

<input>

     <param type="int"  name="nl">
     <description>atmospheric layer number
       </description>
     </param>

     <param type="int"  name="nf">
     <description>frequency channnel number
       </description>
     <value>0</value>
     </param>

     <param type="int"  name="spwid">
     <description>spectral window id </description>
     <value>0</value>
     </param>

</input>

<returns type="Quantity">
     <description>absorption coefficient for H2O continuum -
     Quantum with unit of m-1
        </description>
</returns>

<example>

ac = at.getAbsH2OCont(0,0,0)
print "H2OCont absorption coefficient for layer 0, channel 0 is ", ac.value, ac.units

</example>

</method>

 
   <method type="function" name="getAbsO2Lines">
   <shortdescription>
Get O2 lines Absorption Coefficient at layer nl and frequency channel nf in spectral window spwid
   </shortdescription>
   
<description>
Get O2 lines Absorption Coefficient at layer nl, 
spectral window spwid and frequency channel nf
</description>

<input>

     <param type="int"  name="nl">
     <description>atmospheric layer number
       </description>
     </param>

     <param type="int"  name="nf">
     <description>frequency channnel number
       </description>
     <value>0</value>
     </param>

     <param type="int"  name="spwid">
     <description>spectral window id </description>
     <value>0</value>
     </param>

</input>

<returns type="Quantity">
     <description>absorption coefficient for O2 lines -
     Quantum with unit of m-1
        </description>
</returns>

<example>

ac = at.getAbsO2Lines(0,0,0)
print "O2 lines absorption coefficient for layer 0, channel 0 is ", ac.value, ac.units

</example>

</method>

 
   <method type="function" name="getAbsDryCont">
   <shortdescription>
Get Dry Continuum Absorption Coefficient at layer nl and frequency channel nf in spectral window spwid
   </shortdescription>
   
<description>
Get Dry Continuum Absorption Coefficient at layer nl, 
spectral window spwid and frequency channel nf
</description>

<input>

     <param type="int"  name="nl">
     <description>atmospheric layer number
       </description>
     </param>

     <param type="int"  name="nf">
     <description>frequency channnel number
       </description>
     <value>0</value>
     </param>

     <param type="int"  name="spwid">
     <description>spectral window id </description>
     <value>0</value>
     </param>

</input>

<returns type="Quantity">
     <description>absorption coefficient for dry continuum -
     Quantum with unit of m-1
        </description>
</returns>

<example>

ac = at.getAbsDryCont(0,0,0)
print "Dry Continuum absorption coefficient for layer 0, channel 0 is ", ac.value, ac.units

</example>

</method>

 
   <method type="function" name="getAbsO3Lines">
   <shortdescription>
Get O3 lines Absorption Coefficient at layer nl and frequency channel nf in spectral window spwid
   </shortdescription>
   
<description>
Get O3 lines Absorption Coefficient at layer nl,  
spectral window spwid and frequency channel nf
</description>

<input>

     <param type="int"  name="nl">
     <description>atmospheric layer number
       </description>
     </param>

     <param type="int"  name="nf">
     <description>frequency channnel number
       </description>
     <value>0</value>
     </param>

     <param type="int"  name="spwid">
     <description>spectral window id </description>
     <value>0</value>
     </param>

</input>

<returns type="Quantity">
     <description>absorption coefficient for O3 lines -
     Quantum with unit of m-1
        </description>
</returns>

<example>

ac = at.getAbsO3Lines(0,0,0)
print "O3 lines absorption coefficient for layer 0, channel 0 is ", ac.value, ac.units

</example>

</method>

 
   <method type="function" name="getAbsCOLines">
   <shortdescription>
Get CO lines Absorption Coefficient at layer nl and frequency channel nf in spectral window spwid
   </shortdescription>
   
<description>
Get CO lines Absorption Coefficient at layer nl, 
spectral window spwid and frequency channel nf
</description>

<input>

     <param type="int"  name="nl">
     <description>atmospheric layer number
       </description>
     </param>

     <param type="int"  name="nf">
     <description>frequency channnel number
       </description>
     <value>0</value>
     </param>

     <param type="int"  name="spwid">
     <description>spectral window id </description>
     <value>0</value>
     </param>

</input>

<returns type="Quantity">
     <description>absorption coefficient for CO lines -
     Quantum with unit of m-1
        </description>
</returns>

<example>

ac = at.getAbsCOLines(0,0,0)
print "CO lines absorption coefficient for layer 0, channel 0 is ", ac.value, ac.units

</example>

</method>

 
   <method type="function" name="getAbsN2OLines">
   <shortdescription>
Get N2O lines Absorption Coefficient at layer nl and frequency channel nf in spectral window spwid
   </shortdescription>
   
<description>
Get N2O lines Absorption Coefficient at layer nl, 
spectral window spwid and frequency channel nf
</description>

<input>

     <param type="int"  name="nl">
     <description>atmospheric layer number
       </description>
     </param>

     <param type="int"  name="nf">
     <description>frequency channnel number
       </description>
     <value>0</value>
     </param>

     <param type="int"  name="spwid">
     <description>spectral window id </description>
     <value>0</value>
     </param>

</input>

<returns type="Quantity">
     <description>absorption coefficient for N2O lines -
     Quantum with unit of m-1
        </description>
</returns>

<example>

ac = at.getAbsN2OLines(0,0,0)
print "N2O lines absorption coefficient for layer 0, channel 0 is ", ac.value, ac.units

</example>

</method>

 
   <method type="function" name="getAbsTotalDry">
   <shortdescription>
Get Total Dry Absorption Coefficient at layer nl and frequency channel nf in spectral window spwid
   </shortdescription>
   
<description>
Get total dry Absorption Coefficient at layer nl, 
spectral window spwid and frequency channel nf
</description>

<input>

     <param type="int"  name="nl">
     <description>atmospheric layer number
       </description>
     </param>

     <param type="int"  name="nf">
     <description>frequency channnel number
       </description>
     <value>0</value>
     </param>

     <param type="int"  name="spwid">
     <description>spectral window id </description>
     <value>0</value>
     </param>

</input>

<returns type="Quantity">
     <description>total dry absorption coefficient -
     Quantum with unit of m-1
        </description>
</returns>

<example>

ac = at.getAbsTotalDry(0,0,0)
print "Total dry absorption coefficient for layer 0, channel 0 is ", ac.value, ac.units

</example>

</method>

 
   <method type="function" name="getAbsTotalWet">
   <shortdescription>
Get total wet absorption coefficient at layer nl and frequency channel nf in spectral window spwid
   </shortdescription>
   
<description>
Get total wet absorption coefficient at layer nl, 
spectral window spwid and frequency channel nf
</description>

<input>

     <param type="int"  name="nl">
     <description>atmospheric layer number
       </description>
     </param>

     <param type="int"  name="nf">
     <description>frequency channnel number
       </description>
     <value>0</value>
     </param>

     <param type="int"  name="spwid">
     <description>spectral window id </description>
     <value>0</value>
     </param>

</input>

<returns type="Quantity">
     <description>Total wet absorption coefficient -
     Quantum with unit of m-1
        </description>
</returns>

<example>

ac = at.getAbsTotalWet(0,0,0)
print "Total wet absorption coefficient for layer 0, channel 0 is ", ac.value, ac.units

</example>

</method>

   <method type="function" name="setUserWH2O">
   <shortdescription>set the user zenith water vapor column</shortdescription>

<description>

Set user zenith water vapor column for forward radiative transfer
calculations.

</description>

<input>
     <param type="double" direction="in" name="wh2o" units="mm">
     <description>User water vapor column</description>
     <value>0.0</value>
     </param>

</input>

<returns type="bool"/>

<example>

wh2o=quantity(0.8,"mm")
at.setUserWH2O(wh2o)

</example>

</method>


   <method type="function" name="getUserWH2O">
   <shortdescription>get the user zenith water vapor column</shortdescription>

<description>

Get user zenith water vapor column for forward radiative transfer
calculations.

</description>

<returns type="Quantity">User water vapor column</returns>

<example>

print "water vapor column: ", at.getUserWH2O().value, at.getUserWH2O().units

</example>

</method>

 
   <method type="function" name="setAirMass">
   <shortdescription>Set the air mass</shortdescription>
   
<description>
Setter for air mass in SkyStatus without performing water vapor retrieval.
</description>

<input>
     <param type="double" direction="in" name="airmass">
     <description>Air Mass</description>
     </param>
</input>
<returns type="bool"/>

<example>

at.setAirMass(1.51)

</example>
</method>

 
   <method type="function" name="getAirMass">
   <shortdescription>Get the air mass</shortdescription>
   
<description>
Accessor to get airmass.
</description>

<returns type="double">Air mass value</returns>
<example>

at.setAirMass(2.0)
print "(INPUT CHANGE) Air mass: ", at.getAirMass()

</example>
</method>


   <method type="function" name="setSkyBackgroundTemperature">
   <shortdescription>Set the sky background temperature</shortdescription>
   
<description>
 	Set sky background temperature in SkyStatus without performing water vapor retrieval
</description>

<input>
     <param type="double" direction="in" name="tbgr" units="K">
     <description>sky background temperature</description>
     <value>2.73</value>
     </param>
</input>
<returns type="bool"/>

<example>

at.setSkyBackgroundTemperature(quantity(2.73,'K'))

</example>
</method>

 
   <method type="function" name="getSkyBackgroundTemperature">
   <shortdescription>Get the sky background temperature</shortdescription>
   
<description>
Get the sky background temperature
</description>

<returns type="Quantity">sky background temperature</returns>
<example>

In [6]: t=at.getSkyBackgroundTemperature()

In [7]: print t.value,t.units
2.73 K

</example>
</method>

 
   <method type="function" name="getAverageTebbSky">
   <shortdescription>Returns average equiv. BB Temp</shortdescription>
   
<description>
Returns the average Equivalent Blackbody Temperature in spectral
window spwid, for the current conditions and a perfect sky coupling.
</description>

<input>
     <param type="int" direction="in" name="spwid">
     <description>Spectral window (0-based)</description>
     <value>0</value>
     </param>
     <param type="double" direction="in" name="wh2o" units="mm">
     <description>User specified water column length in mm.  Default is not to use wh2o.</description>
     <value>-1</value>
     </param>
</input>

<returns type="Quantity">Average Tebb</returns>

<example>

wh2o=quantity(0.4,'mm')
print "(INPUT CHANGE) water vapor column:", wh2o.value, wh2o.units
print "(NEW OUTPUT) T_EBB =", at.getAverageTebbSky(0,wh2o).value, at.getAverageTebbSky(0,wh2o).units

</example>

</method>

 
   <method type="function" name="getTebbSky">
   <shortdescription>Returns equiv. BB Temp</shortdescription>
   
<description>
Gets the Equivalent Blackbody Temperature in spectral window spwid and
channel nc, for Water Vapor Column wh2o, the current Air Mass, and
perfect Sky Coupling to the sky.
</description>

<input>
     <param type="int" direction="in" name="nc">
     <description>Channel number (0-based) - defaults to reference channel</description>
     <value>-1</value>
     </param>
         <param type="int" direction="in" name="spwid">
     <description>Spectral window (0-based)</description>
     <value>0</value>
     </param>
     <param type="double" direction="in" name="wh2o" units="mm">
     <description>User specified water column length in mm.  Default is not to use wh2o.</description>
     <value>-1</value>
     </param>
</input>

<returns type="Quantity">Average Tebb</returns>

<example>

for s in range(at.getNumSpectralWindows()):
        for i in range(n):
                print "Band", s, " channel ", i, "TebbSky = ", at.getTebbSky(i,s).value, at.getTebbSky().units


</example>
</method>

</tool>

</casaxml>
